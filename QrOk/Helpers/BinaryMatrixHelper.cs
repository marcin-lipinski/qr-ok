using QrOk.Enums;

namespace QrOk.Helpers;

internal static class BinaryMatrixHelper
{
    // starts from version 2
    private static readonly byte[][] _alignmentPatternsCoordinates =
    [
        [6, 18],
        [6, 22],
        [6, 26],
        [6, 30],
        [6, 34],
        [6, 22, 38],
        [6, 24, 42],
        [6, 26, 46],
        [6, 28, 50],
        [6, 30, 54],
        [6, 32, 58],
        [6, 34, 62],
        [6, 26, 46, 66],
        [6, 26, 48, 70],
        [6, 26, 50, 74],
        [6, 30, 54, 78],
        [6, 30, 56, 82],
        [6, 30, 58, 86],
        [6, 34, 62, 90],
        [6, 28, 50, 72, 94],
        [6, 26, 50, 74, 98],
        [6, 30, 54, 78, 102],
        [6, 28, 54, 80, 106],
        [6, 32, 58, 84, 110],
        [6, 30, 58, 86, 114],
        [6, 34, 62, 90, 118],
        [6, 26, 50, 74, 98, 122],
        [6, 30, 54, 78, 102, 126],
        [6, 26, 52, 78, 104, 130],
        [6, 30, 56, 82, 108, 134],
        [6, 34, 60, 86, 112, 138],
        [6, 30, 58, 86, 114, 142],
        [6, 34, 62, 90, 118, 146],
        [6, 30, 54, 78, 102, 126, 150],
        [6, 24, 50, 76, 102, 128, 154],
        [6, 28, 54, 80, 106, 132, 158],
        [6, 32, 58, 84, 110, 136, 162],
        [6, 26, 54, 82, 110, 138, 166],
        [6, 30, 58, 86, 114, 142, 170]
    ];

    private static readonly short[][] _formatStrings =
    [
        [
            0b111011111000100,
            0b111001011110011,
            0b111110110101010,
            0b111100010011101,
            0b110011000101111,
            0b110001100011000,
            0b110110001000001,
            0b110100101110110
        ],
        [
            0b101010000010010,
            0b101000100100101,
            0b101111001111100,
            0b101101101001011,
            0b100010111111001,
            0b100000011001110,
            0b100111110010111,
            0b100101010100000
        ],
        [
            0b011010101011111,
            0b011000001101000,
            0b011111100110001,
            0b011101000000110,
            0b010010010110100,
            0b010000110000011,
            0b010111011011010,
            0b010101111101101
        ],
        [
            0b001011010001001,
            0b001001110111110,
            0b001110011100111,
            0b001100111010000,
            0b000011101100010,
            0b000001001010101,
            0b000110100001100,
            0b000100000111011
        ]
    ];

    // starts from version 7
    internal static readonly int[] _versionStrings =
    [
        0b000111110010010100,
        0b001000010110111100,
        0b001001101010011001,
        0b001010010011010011,
        0b001011101111110110,
        0b001100011101100010,
        0b001101100001000111,
        0b001110011000001101,
        0b001111100100101000,
        0b010000101101111000,
        0b010001010001011101,
        0b010010101000010111,
        0b010011010100110010,
        0b010100100110100110,
        0b010101011010000011,
        0b010110100011001001,
        0b010111011111101100,
        0b011000111011000100,
        0b011001000111100001,
        0b011010111110101011,
        0b011011000010001110,
        0b011100110000011010,
        0b011101001100111111,
        0b011110110101110101,
        0b011111001001010000,
        0b100000100111010101,
        0b100001011011110000,
        0b100010100010111010,
        0b100011011110011111,
        0b100100101100001011,
        0b100101010000101110,
        0b100110101001100100,
        0b100111010101000001,
        0b101000110001101001
    ];

    public static Func<int, int, bool>[] MaskingFunctions =
    [
        (row, column) => (row + column) % 2 == 0,
        (row, column) => row % 2 == 0,
        (row, column) => column % 3 == 0,
        (row, column) => (row + column) % 3 == 0,
        (row, column) => (Math.Floor((decimal)row / 2) + Math.Floor((decimal)column / 3)) % 2 == 0,
        (row, column) => row * column % 2 + row * column % 3 == 0,
        (row, column) => (row * column % 2 + row * column % 3) % 2 == 0,
        (row, column) => ((row + column) % 2 + row * column % 3) % 2 == 0
    ];

    public static byte[] GetAlignementPatternsCoordinates(int version)
    {
        return _alignmentPatternsCoordinates[version - 2];
    }

    public static short GetFormatString(ErrorCorrectionLevel level, int maskVersion)
    {
        return _formatStrings[(int)level][maskVersion];
    }

    public static int GetVersionString(int version)
    {
        return _versionStrings[version - 7];
    }
}
